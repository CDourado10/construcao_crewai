from typing import Type
from crewai.tools import BaseTool
from pydantic import BaseModel, Field


class ExemploToolInput(BaseModel):
    """Define os par√¢metros de entrada necess√°rios para a execu√ß√£o da ExemploTool."""

    argument_1: str = Field(
        ...,
        description=(
            "Primeiro argumento que estabelece o contexto principal da execu√ß√£o.\n"
            "Exemplos v√°lidos: 'relat√≥rio financeiro', 'tend√™ncias em IA', 'resumo de artigo acad√™mico'."
        ),
    )
    argument_2: str = Field(
        ...,
        description=(
            "Segundo argumento que complementa ou refina o primeiro argumento.\n"
            "Exemplos v√°lidos: 'curto prazo', 'para leigos', 'com foco em oportunidades de neg√≥cio'."
        ),
    )


class ExemploTool(BaseTool):
    # Nome da ferramenta (como ser√° referenciada pelo CrewAI)
    name: str = "Exemplo Tool"

    # Descri√ß√£o geral da ferramenta ‚Äî deve ser clara para humanos e LLMs
    description: str = (
        "Uma ferramenta de demonstra√ß√£o que combina diferentes m√©todos internos "
        "para gerar um resultado final organizado e compreens√≠vel.\n\n"
        "üìå Prop√≥sito:\n"
        "- Demonstrar a estrutura de implementa√ß√£o de uma Tool no CrewAI.\n"
        "- Ilustrar como dividir a l√≥gica em m√©todos internos reutiliz√°veis.\n\n"
        "üìÇ Casos de uso:\n"
        "- Servir como modelo para novos desenvolvedores.\n"
        "- Testar a integra√ß√£o de ferramentas personalizadas.\n\n"
        "‚úÖ Exemplos de entrada:\n"
        "- argument_1='relat√≥rio financeiro', argument_2='curto prazo'\n"
        "- argument_1='tend√™ncias em IA', argument_2='para leigos'\n\n"
        "üì§ Exemplo de sa√≠da:\n"
        "'Organizar as informa√ß√µes retornadas pelos m√©todos internos: metodo interno 1 metodo interno 2'"
    )

    # Schema de entrada esperado
    args_schema: Type[BaseModel] = ExemploToolInput

    def _metodo_interno_1(self) -> str:
        """
        Executa a primeira etapa da l√≥gica da ferramenta.

        Retorno:
            str: Um resultado parcial da primeira opera√ß√£o.
        """
        return "metodo interno 1"

    def _metodo_interno_2(self) -> str:
        """
        Executa a segunda etapa da l√≥gica da ferramenta.

        Retorno:
            str: Um resultado parcial da segunda opera√ß√£o.
        """
        return "metodo interno 2"

    def _metodo_interno_3(self) -> str:
        """
        Combina os resultados dos m√©todos internos anteriores,
        organizando-os em uma sa√≠da final clara e estruturada.

        Retorno:
            str: Resultado consolidado da execu√ß√£o da ferramenta.
        """
        metodo_1 = self._metodo_interno_1()
        metodo_2 = self._metodo_interno_2()
        resultado = (
            f"Organizar as informa√ß√µes retornadas pelos m√©todos internos: {metodo_1} {metodo_2}"
        )
        return resultado

    def _run(self, argument_1: str, argument_2: str) -> str:
        """
        M√©todo principal de execu√ß√£o da Tool.

        Atua como fachada, chamando os m√©todos internos na ordem correta
        e retornando o resultado consolidado.

        Args:
            argument_1 (str): Contexto principal da execu√ß√£o.
            argument_2 (str): Complemento ou refinamento do argumento principal.

        Retorno:
            str: Resultado final da ferramenta, em formato de string leg√≠vel.
        """
        return self._metodo_interno_3()
