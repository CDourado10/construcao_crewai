#!/usr/bin/env python
"""
GUIA DE CONSTRU√á√ÉO DE FLOWS NO CREWAI

Este arquivo serve como um guia did√°tico para a constru√ß√£o de flows no CrewAI,
demonstrando as melhores pr√°ticas e padr√µes de implementa√ß√£o.

Um flow no CrewAI representa um fluxo de trabalho ass√≠ncrono que:
1. Define um estado estruturado para compartilhar informa√ß√µes entre etapas
2. Organiza a execu√ß√£o em etapas sequenciais ou paralelas
3. Integra diferentes componentes (crews, agentes, tarefas, ferramentas)
4. Processa informa√ß√µes de forma modular e escal√°vel

Este exemplo demonstra a integra√ß√£o completa entre todos os componentes do projeto.
"""

# [BLOCO 1] - IMPORTS E CONFIGURA√á√ÉO INICIAL
# ------------------------------------------------------
# Sempre organize seus imports em blocos l√≥gicos:
# 1. Bibliotecas padr√£o do Python
# 2. Bibliotecas de terceiros
# 3. M√≥dulos locais do projeto

# Bibliotecas padr√£o do Python
import os
import sys
from typing import Dict, Any

# Bibliotecas de terceiros
from pydantic import BaseModel, Field
from dotenv import load_dotenv
from crewai.flow.flow import Flow, listen, start

# Configura√ß√£o de caminhos para imports relativos
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.append(project_root)

# Imports locais do projeto
from crews.crew_exemplo.crew_exemplo_crew import metodo_de_execucao_da_crew
from crews.crew_relatorio.crew_relatorio_crew import executar_crew_relatorio

# Carrega vari√°veis de ambiente
load_dotenv()

# [BLOCO 2] - MODELAGEM DO ESTADO DO FLOW
# ------------------------------------------------------
# O estado do flow √© fundamental para compartilhar informa√ß√µes entre etapas.
# Use Pydantic para criar um modelo estruturado com valida√ß√£o autom√°tica.

class FlowExemploState(BaseModel):
    """Estado estruturado para o Flow de Exemplo.
    
    Um bom modelo de estado deve:
    1. Documentar claramente cada campo
    2. Definir valores padr√£o quando apropriado
    3. Usar tipos espec√≠ficos para garantir valida√ß√£o
    4. Incluir todos os dados que precisam ser compartilhados entre etapas
    """
    # Dados de entrada do flow
    topico: str = Field(
        description="T√≥pico principal a ser processado pelo flow"
    )
    
    # Informa√ß√µes externas para a crew
    info_externa_1: str = Field(
        default="", 
        description="Primeira informa√ß√£o contextual para a crew"
    )
    info_externa_2: str = Field(
        default="", 
        description="Segunda informa√ß√£o contextual para a crew"
    )
    info_externa_3: str = Field(
        default="", 
        description="Terceira informa√ß√£o contextual para a crew"
    )
    
    # Resultados intermedi√°rios e finais
    resultado_crew: dict = Field(
        default_factory=dict, 
        description="Resultado estruturado retornado pela crew_exemplo"
    )
    relatorio_final: str = Field(default="", description="Relat√≥rio final gerado com base nos resultados da crew")

# [BLOCO 3] - IMPLEMENTA√á√ÉO DO FLOW
# ------------------------------------------------------
# A classe do flow herda de Flow e implementa os m√©todos necess√°rios
# para definir o fluxo de execu√ß√£o.

class FlowExemplo(Flow):
    """
    Flow did√°tico que demonstra como integrar todos os componentes do CrewAI.
    
    Estrutura do flow:
    1. Inicializa√ß√£o e configura√ß√£o do estado (@Flow.start)
    2. Prepara√ß√£o de informa√ß√µes para a crew (@Flow.listen)
    3. Execu√ß√£o da crew_exemplo (@Flow.listen)
    4. Gera√ß√£o de relat√≥rio final com agente e ferramenta (@Flow.listen)
    5. Finaliza√ß√£o e entrega do resultado (@Flow.listen)
    
    Cada etapa √© implementada como um m√©todo ass√≠ncrono decorado adequadamente.
    """
    
    def __init__(self):
        """Inicializa o flow de exemplo integrado com crew_exemplo."""
        super().__init__()
        
    @start()
    async def iniciar_flow(self) -> Dict[str, Any]:
        """
        Ponto de entrada do flow.
        
        O m√©todo decorado com @start() √© sempre o primeiro a ser executado.
        Ele acessa o estado atrav√©s de self.state e deve retornar um estado 
        atualizado para as pr√≥ximas etapas.
        
        Returns:
            Estado estruturado convertido para dicion√°rio.
        """
        # [DICA 1] - ACESSO AO ESTADO
        # M√©todos @start() acessam o estado atrav√©s de self.state
        # O estado j√° foi inicializado pelo m√©todo kickoff() com os inputs fornecidos
        current_state = self.state if isinstance(self.state, dict) else self.state.__dict__
        
        # [DICA 2] - CONVERS√ÉO DE ESTADO
        # Converta o estado n√£o estruturado (dicion√°rio) para um objeto Pydantic
        # Isso garante valida√ß√£o autom√°tica e acesso estruturado aos dados
        flow_state = FlowExemploState(
            # Use get() com valores padr√£o para lidar com entradas ausentes
            topico=current_state.get("topico", "[T√≥pico n√£o especificado]"),
            # Voc√™ pode usar valores de entrada para construir outros campos
            info_externa_1=current_state.get("info_externa_1", f"Contexto inicial sobre {current_state.get('topico', '[T√≥pico]')}")
        )
        
        # [DICA 3] - LOGGING CLARO
        # Use emojis e mensagens claras para facilitar o acompanhamento do flow
        print(f"üöÄ [FLOW EXEMPLO] Iniciando com t√≥pico: '{flow_state.topico}'")
        
        # [DICA 4] - RETORNO DE ESTADO
        # Sempre converta o objeto Pydantic de volta para dicion√°rio ao retornar
        return flow_state.model_dump()
    
    @listen("iniciar_flow")
    async def preparar_informacoes_externas(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """
        Prepara informa√ß√µes externas para a crew_exemplo.
        
        O decorador @listen("metodo_anterior") indica que este m√©todo
        deve ser executado ap√≥s a conclus√£o do m√©todo especificado.
        
        Args:
            state: Estado atual do flow (dicion√°rio).
            
        Returns:
            Estado atualizado com informa√ß√µes externas preparadas.
        """
        # [DICA 4] - RECONSTRU√á√ÉO DE ESTADO
        # Reconstrua o objeto Pydantic a partir do dicion√°rio recebido
        flow_state = FlowExemploState(**state)
        
        print(f"üìã [FLOW EXEMPLO] Preparando informa√ß√µes para: '{flow_state.topico}'")
        
        # [DICA 5] - PROCESSAMENTO DE DADOS
        # Aqui voc√™ pode realizar qualquer processamento necess√°rio antes de chamar a crew
        # Por exemplo: buscar dados externos, formatar informa√ß√µes, etc.
        
        # Neste exemplo, estamos apenas criando informa√ß√µes de demonstra√ß√£o
        # Em um caso real, estas informa√ß√µes viriam de fontes externas ou processamento
        flow_state.info_externa_1 = f"Contexto principal sobre '{flow_state.topico}'"
        flow_state.info_externa_2 = f"Dados complementares relacionados a '{flow_state.topico}'"
        flow_state.info_externa_3 = f"Informa√ß√µes adicionais relevantes para '{flow_state.topico}'"
        
        print("‚úÖ [FLOW EXEMPLO] Informa√ß√µes preparadas com sucesso")
        
        # Sempre retorne o estado atualizado como dicion√°rio
        return flow_state.model_dump()
    
    @listen("preparar_informacoes_externas")
    async def executar_crew_exemplo(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """
        Executa a crew_exemplo com as informa√ß√µes preparadas.
        
        Esta etapa demonstra como integrar uma crew existente dentro de um flow,
        permitindo a composi√ß√£o de fluxos complexos a partir de componentes reutiliz√°veis.
        
        Args:
            state: Estado atual do flow com informa√ß√µes externas.
            
        Returns:
            Estado atualizado com os resultados da crew_exemplo.
        """
        # Reconstrua o objeto de estado
        flow_state = FlowExemploState(**state)
        
        print(f"ü§ñ [FLOW EXEMPLO] Executando crew_exemplo para: '{flow_state.topico}'")
        
        # [DICA 6] - INTEGRA√á√ÉO COM CREWS
        # Ao integrar crews em flows, voc√™ pode:
        # 1. Chamar um m√©todo de execu√ß√£o da crew (como neste exemplo)  
        # 2. Instanciar e executar a crew diretamente
        # 3. Usar uma abordagem h√≠brida com configura√ß√£o din√¢mica
        
        try:
            # Executa a crew_exemplo com as informa√ß√µes preparadas
            resultado_crew = metodo_de_execucao_da_crew(
                info_externa_1=flow_state.info_externa_1,
                info_externa_2=flow_state.info_externa_2,
                info_externa_3=flow_state.info_externa_3
            )
            
            # Atualiza o estado com os resultados da crew
            flow_state.resultado_crew = resultado_crew
            
            print("‚úÖ [FLOW EXEMPLO] Crew executada com sucesso")
            
        except Exception as e:
            # [DICA 7] - TRATAMENTO DE ERROS
            # Sempre trate poss√≠veis erros para evitar que o flow inteiro falhe
            print(f"‚ùå [FLOW EXEMPLO] Erro ao executar crew: {str(e)}")
            # Em caso de erro, podemos fornecer um resultado padr√£o ou alternativo
            flow_state.resultado_crew = {"erro": str(e), "resultado_alternativo": "Dados de fallback"}
        
        return flow_state.model_dump()
    
    @listen("executar_crew_exemplo")
    async def gerar_relatorio_final(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """
        Gera um relat√≥rio final usando a crew_relatorio especializada.
        
        Esta etapa demonstra como integrar crews especializadas dentro de um flow,
        seguindo a estrutura padr√£o do projeto com agentes e tarefas configurados via YAML.
        
        Args:
            state: Estado atual do flow com os resultados da crew.
            
        Returns:
            Estado atualizado com o relat√≥rio final.
        """
        flow_state = FlowExemploState(**state)
        
        print(f"üìù [FLOW EXEMPLO] Gerando relat√≥rio final para: '{flow_state.topico}'")
        
        try:
            # [DICA 8] - INTEGRA√á√ÉO COM CREW ESPECIALIZADA
            # Use crews especializadas para tarefas espec√≠ficas, mantendo a estrutura padr√£o
            resultado_relatorio = executar_crew_relatorio(
                dados_entrada=str(flow_state.resultado_crew),
                topico=flow_state.topico
            )
            
            # Extrai o conte√∫do do relat√≥rio do resultado da crew
            if hasattr(resultado_relatorio, 'raw'):
                flow_state.relatorio_final = resultado_relatorio.raw
            else:
                flow_state.relatorio_final = str(resultado_relatorio)
            
            print("‚úÖ [FLOW EXEMPLO] Relat√≥rio final gerado com sucesso")
            
        except Exception as e:
            print(f"‚ùå [FLOW EXEMPLO] Erro ao gerar relat√≥rio: {str(e)}")
            flow_state.relatorio_final = f"N√£o foi poss√≠vel gerar o relat√≥rio: {str(e)}"
        
        return flow_state.model_dump()
    
    @listen("gerar_relatorio_final")
    async def finalizar_flow(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """
        Finaliza o flow e prepara a sa√≠da final.
        
        Esta √© a √∫ltima etapa do flow, respons√°vel por finalizar o processamento
        e preparar os dados para retorno ao chamador.
        
        Args:
            state: Estado atual do flow com o relat√≥rio final.
            
        Returns:
            Estado final do flow, pronto para ser retornado ao chamador.
        """
        flow_state = FlowExemploState(**state)
        
        # [DICA 11] - FINALIZA√á√ÉO DO FLOW
        # Use esta etapa para:
        # 1. Realizar limpezas necess√°rias
        # 2. Formatar os dados de sa√≠da
        # 3. Registrar m√©tricas ou logs finais
        # 4. Preparar o estado para retorno
        
        print(f"üèÅ [FLOW EXEMPLO] Finalizando flow para: '{flow_state.topico}'")
        
        # Exibe um resumo dos resultados (opcional)
        print("\n" + "="*50)
        print(f"RESUMO DO FLOW: '{flow_state.topico}'")
        print("="*50)
        print(f"Informa√ß√µes processadas: {len(flow_state.resultado_crew)}")
        print(f"Tamanho do relat√≥rio: {len(flow_state.relatorio_final)} caracteres")
        print("="*50)
        
        # [DICA 12] - RETORNO FINAL
        # O estado final deve conter todos os dados relevantes para o chamador
        return flow_state.model_dump()

# [BLOCO 4] - FUN√á√ïES AUXILIARES E PONTO DE ENTRADA
# ------------------------------------------------------
# Estas fun√ß√µes facilitam a execu√ß√£o e teste do flow

async def executar_flow_async(topico: str, **kwargs) -> Dict[str, Any]:
    """
    Fun√ß√£o auxiliar ass√≠ncrona para executar o flow com par√¢metros espec√≠ficos.
    
    Esta fun√ß√£o facilita a execu√ß√£o do flow a partir de outros m√≥dulos
    ou scripts, encapsulando a cria√ß√£o e execu√ß√£o do flow.
    
    Args:
        topico: O t√≥pico principal a ser processado pelo flow.
        **kwargs: Par√¢metros adicionais para o flow.
        
    Returns:
        Resultado da execu√ß√£o do flow.
    """
    # Instancia o flow
    flow = FlowExemplo()
    
    # Prepara os par√¢metros de entrada como state
    state = {"topico": topico}
    state.update(kwargs)  # Adiciona par√¢metros opcionais
    
    # Executa o flow e retorna o resultado
    return await flow.kickoff(state)

def executar_flow(topico: str, **kwargs) -> Dict[str, Any]:
    """
    Fun√ß√£o s√≠ncrona para executar o flow.
    
    Args:
        topico: O t√≥pico principal a ser processado pelo flow.
        **kwargs: Par√¢metros adicionais para o flow.
        
    Returns:
        Resultado da execu√ß√£o do flow.
    """
    # Instancia o flow
    flow = FlowExemplo()
    
    # Prepara os par√¢metros de entrada como state
    state = {"topico": topico}
    state.update(kwargs)  # Adiciona par√¢metros opcionais
    
    # Executa o flow usando o m√©todo s√≠ncrono kickoff
    # O CrewAI gerencia internamente o event loop
    return flow.kickoff(state)

# Ponto de entrada para execu√ß√£o direta do script
if __name__ == "__main__":
    # [DICA 14] - EXECU√á√ÉO STANDALONE
    # Defina par√¢metros de exemplo para teste r√°pido do flow
    
    print("\n" + "="*70)
    print("GUIA DE CONSTRU√á√ÉO DE FLOWS NO CREWAI - EXEMPLO DID√ÅTICO")
    print("="*70)
    
    # Par√¢metros de exemplo para teste
    TOPICO_EXEMPLO = "Constru√ß√£o de Flows no CrewAI"
    INFO_ADICIONAL = "Foco em integra√ß√£o de componentes e boas pr√°ticas"
    
    # Executa o flow
    try:
        resultado = executar_flow(
            topico=TOPICO_EXEMPLO,
            info_externa_1=INFO_ADICIONAL
        )
        print("‚úÖ Flow executado com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao executar o flow: {str(e)}")
        import traceback
        traceback.print_exc()
        resultado = {"relatorio_final": f"Erro na execu√ß√£o: {str(e)}"}
    
    # Exibe o resultado final formatado
    print("\n" + "="*70)
    print(f"RESULTADO DO FLOW: '{TOPICO_EXEMPLO}'")
    print("="*70)
    print(resultado["relatorio_final"][:500] + "..." if len(resultado["relatorio_final"]) > 500 else resultado["relatorio_final"])
    print("\n[Relat√≥rio completo dispon√≠vel no resultado do flow]")
    print("="*70)
    
    print("\nüí° DICA: Este flow serve como um guia did√°tico para constru√ß√£o de flows no CrewAI.")
    print("üí° Estude o c√≥digo-fonte para entender as melhores pr√°ticas e padr√µes de implementa√ß√£o.")
    print("="*70)
